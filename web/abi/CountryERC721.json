{
  "contractName": "CountryERC721",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "user",
          "type": "address"
        },
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isUserInRole",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_approved",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TOTAL_SUPPLY_MAX",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_EXT_WRITER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "InterfaceId_ERC165",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FEATURE_MSIG_ENABLED",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedOperators",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "page",
          "type": "uint256"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "offset",
          "type": "uint8"
        },
        {
          "name": "length",
          "type": "uint8"
        }
      ],
      "name": "writePage",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collections",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "countryData",
      "outputs": [
        {
          "name": "",
          "type": "uint16"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "name": "plots",
          "type": "uint16"
        },
        {
          "name": "tax",
          "type": "uint8"
        },
        {
          "name": "taxModified",
          "type": "uint32"
        },
        {
          "name": "index",
          "type": "uint8"
        },
        {
          "name": "ownershipModified",
          "type": "uint32"
        },
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "offset",
          "type": "uint8"
        },
        {
          "name": "length",
          "type": "uint8"
        }
      ],
      "name": "write",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_TAX_MANAGER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "uint256"
        },
        {
          "name": "_expiresOn",
          "type": "uint256"
        }
      ],
      "name": "constructUpdateMsigRequest",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvals",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allTokens",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "page",
          "type": "uint256"
        },
        {
          "name": "offset",
          "type": "uint8"
        },
        {
          "name": "length",
          "type": "uint8"
        }
      ],
      "name": "readPage",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_TAX_INV",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRoles",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MSIG_QUORUM",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TOKEN_UID",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_TOKEN_CREATOR",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FEATURE_TRANSFERS_ON_BEHALF",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_by",
          "type": "address[]"
        },
        {
          "name": "actual",
          "type": "uint256"
        },
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "evaluateBy",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_operator",
          "type": "address"
        },
        {
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenMap",
      "outputs": [
        {
          "name": "",
          "type": "uint192"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "revokeApproval",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTransferable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FEATURE_TRANSFERS",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DEFAULT_TAX_RATE",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "offset",
          "type": "uint8"
        },
        {
          "name": "length",
          "type": "uint8"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FEATURE_ALLOW_TAX_UPDATE",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxTaxChangeFreq",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "uint256"
        },
        {
          "name": "_expiresOn",
          "type": "uint256"
        },
        {
          "name": "v",
          "type": "uint8[]"
        },
        {
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "updateMsig",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_TOKEN_DESTROYER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_countryData",
          "type": "uint16[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_from",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "_to",
          "type": "uint8"
        }
      ],
      "name": "TaxRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_from",
          "type": "uint32"
        },
        {
          "indexed": false,
          "name": "_to",
          "type": "uint32"
        }
      ],
      "name": "MaxTaxChangeFreqUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_actual",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAllCountriesPacked",
      "outputs": [
        {
          "name": "",
          "type": "uint184[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getNumberOfCountries",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getTotalNumberOfPlots",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getNumberOfPlotsByCountryOwner",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPacked",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getCollection",
      "outputs": [
        {
          "name": "",
          "type": "uint8[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPackedCollection",
      "outputs": [
        {
          "name": "",
          "type": "uint32[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfPlots",
      "outputs": [
        {
          "name": "",
          "type": "uint16"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTax",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTaxPacked",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTaxPercent",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "calculateTaxValueFor",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "nominator",
          "type": "uint8"
        },
        {
          "name": "denominator",
          "type": "uint8"
        }
      ],
      "name": "updateTaxRate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_maxTaxChangeFreq",
          "type": "uint32"
        }
      ],
      "name": "updateMaxTaxChangeFreq",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint8"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-06-07T13:06:54.895Z",
  "devdoc": {
    "details": "A country is an ERC721 non-fungible token, which maps Token ID,     a 8 bit number in range [1, 192] to a set of country properties -     number of plots and owner's tax rate.Country token supports only minting of predefined countries,     its not possible to destroy a country.Up to 192 countries are defined during contract deployment and initialization.",
    "methods": {
      "approve(address,uint256)": {
        "details": "The zero approved address revokes an approval for a given tokenThere can only be one approved address per token at a given timeThis function can only be called by the token owner",
        "params": {
          "_approved": "address to be approved to transfer the token on behalf of its owner",
          "_tokenId": "ID of the token to be approved for transfer on behalf"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "_owner": "address to query the balance for"
        },
        "return": "an amount owned by the address passed as an input parameter"
      },
      "calculateTaxValueFor(uint256,uint256)": {
        "params": {
          "_tokenId": "token id to use tax rate from",
          "_value": "an amount to apply tax to"
        },
        "return": "calculated tax value based on the tokens tax rate and value"
      },
      "constructUpdateMsigRequest(address,uint256,uint256)": {
        "details": "Used to create an update role request to be signed by the userOnce signed by at least 2 users, the request can be executed     using `updateRoleMsig` function",
        "params": {
          "_expiresOn": "an expiration date of the request",
          "_role": "bitmask representing a set of permissions to     enable/disable for a user specified",
          "_to": "address of a user to alter permissions for or zero     to alter global features of the smart contract"
        }
      },
      "constructor": {
        "details": "Creates a Country ERC721 instance,Registers a ERC721 interface using ERC165Initializes the contract with the country data provided",
        "params": {
          "_countryData": "array of packed data structures containing       number of plots for each country"
        }
      },
      "evaluateBy(address[],uint256,uint256)": {
        "details": "Based on the actual role provided (set of permissions), operator addresses,     and role required (set of permissions), calculate the resulting     set of permissions (role).If all operators are super admins and have full permissions (FULL_PRIVILEGES_MASK),     the function will always return `required` regardless of the `actual`.In contrast, if operators have no permissions at all (zero mask),     the function will always return `actual` regardless of the `required`.",
        "params": {
          "_by": "non-empty array of addresses of the contract operators     to use permissions of for evaluation",
          "actual": "input set of permissions to evaluate against",
          "required": "desired set of permissions to have"
        },
        "return": "resulting set of permissions which can be set"
      },
      "exists(uint256)": {
        "details": "Returns whether the specified token ID exists",
        "params": {
          "_tokenId": "ID of the token to query the existence for"
        },
        "return": "whether the token exists (true - exists)"
      },
      "features()": {
        "details": "Auxiliary getter function to maintain compatibility with previous     versions of the Access Control List smart contract, where     features was a separate uint256 public field"
      },
      "getAllCountriesPacked()": {
        "details": "Iterates over all 192 (max) possible countries defined in     CountryERC721 instance this smart contract is bound to,     fetching country owner, number of plots, tax and tax modified date,     and assembled result of the iteration into arrayThe resulting array is ordered by country id, meaning element at     index `i` contains country with an ID `i + 1`The resulting array contains packed data structures for each country, containing:     * number of plots as an integer, 16 bits     * tax rate as a 8 bit fraction, 8 bits     * country owner address as an integer, 160 bitsnote: country owner address may be zero meaning country is not owned",
        "return": "an ordered array of countries as packed data structures"
      },
      "getApproved(uint256)": {
        "details": "Throws if `_tokenId` is not a valid token ID.",
        "params": {
          "_tokenId": "ID of the token to find the approved address for"
        },
        "return": "the approved address for this token,     or the zero address if there is no approved address"
      },
      "getCollection(address)": {
        "params": {
          "owner": "an address to query a collection for"
        },
        "return": "an unordered list of token IDs owned by given address"
      },
      "getNumberOfCountries()": {
        "details": "Maximum number of tokens that contract can mint",
        "return": "length of country data array"
      },
      "getNumberOfPlots(uint256)": {
        "params": {
          "_tokenId": "country id to query number of plots for"
        },
        "return": "number of plots given country has"
      },
      "getNumberOfPlotsByCountryOwner(address)": {
        "details": "Calculates cumulative number of plots     all the countries belonging to given owner have in total",
        "params": {
          "owner": "address of the owner to query countries for"
        },
        "return": "sum of the countries number of plots owned by given address"
      },
      "getPacked(uint256)": {
        "details": "Gets a country by ID, representing it as a single 32-bit integer.     The integer is tightly packed with the country data:       number of plots       tax nominator       tax denominatorThrows if country doesn't exist",
        "params": {
          "_tokenId": "ID of the country to fetch"
        },
        "return": "country as 32-bit unsigned integer"
      },
      "getPackedCollection(address)": {
        "details": "Allows to fetch collection of tokens, including internal token data     in a single function, useful when connecting to external node like INFURAEach element of the array returned is a tightly packed integer, containing       token ID       number of plots       tax nominator       tax denominator",
        "params": {
          "owner": "an address to query a collection for"
        },
        "return": "an unordered list of country packed data owned by give address"
      },
      "getTax(uint256)": {
        "params": {
          "_tokenId": "country id to query tax for"
        },
        "return": "tax as a proper fraction (tuple containing nominator and denominator)"
      },
      "getTaxPacked(uint256)": {
        "params": {
          "_tokenId": "country id to query tax for"
        },
        "return": "tax as a proper fraction packed into uint16"
      },
      "getTaxPercent(uint256)": {
        "details": "Converts 16-bit fraction structure into 8-bit [0, 100] percent value",
        "params": {
          "_tokenId": "country id to query tax for"
        },
        "return": "tax percent value, [0, 100]"
      },
      "getTotalNumberOfPlots()": {
        "details": "Calculates cumulative number of plots all the countries have in total",
        "return": "sum of the countries number of plots"
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "the address that acts on behalf of the owner",
          "_owner": "the address which may have another address acting     on their behalf (operator address)"
        },
        "return": "true if `_operator` is allowed to transfer `_owner`s tokens, false otherwise"
      },
      "isFeatureEnabled(uint256)": {
        "details": "Checks if requested set of features is enabled globally on the contract",
        "params": {
          "required": "set of features to check against"
        },
        "return": "true if all the features requested are enabled, false otherwise"
      },
      "isSenderInRole(uint256)": {
        "details": "Checks if transaction sender `msg.sender` has all the permissions (role) required",
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "return": "true if all the permissions requested are enabled, false otherwise"
      },
      "isTransferable(uint256)": {
        "details": "Verifies if token is transferable (can change ownership)",
        "params": {
          "_tokenId": "ID of the token to check transferable state for"
        },
        "return": "true if token is transferable, false otherwise"
      },
      "isUserInRole(address,uint256)": {
        "details": "Checks if user `user` has all the permissions (role) required",
        "params": {
          "required": "set of permissions (role) to check against",
          "user": "address of the user to check role for"
        },
        "return": "true if all the permissions requested are enabled, false otherwise"
      },
      "mint(address,uint8)": {
        "details": "Creates new token with `tokenId` ID specified and     assigns an ownership `to` for that tokenInitial token's properties are predefined by its ID",
        "params": {
          "_to": "an address to assign created token ownership to",
          "_tokenId": "ID of the token to create"
        }
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token from the `countries` mappingThrows if a token with the ID specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to query the owner for"
        },
        "return": "owner address currently marked as the owner of the given token"
      },
      "read(uint256,uint8,uint8)": {
        "details": "Reads token dataTo read whole 256 bits, set offset and length to zero",
        "params": {
          "_tokenId": "token ID to read data from",
          "length": "how many bits to read",
          "offset": "position in memory to read from (bits)"
        }
      },
      "readPage(uint256,uint256,uint8,uint8)": {
        "details": "Reads token data, allows to access up to 2^256 pages of 256-bit memory slotsTo read whole 256 bits, set offset and length to zero",
        "params": {
          "_tokenId": "token ID to read data from",
          "length": "how many bits to read",
          "offset": "position in memory to read from (bits)",
          "page": "index of the page to read from"
        }
      },
      "revokeApproval(uint256)": {
        "details": "Equal to calling `approve(0, _tokenId)`",
        "params": {
          "_tokenId": "ID of the token to remove approved address for"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address     by verifying if the receiver is an external address or     by calling onERC721Received() function on the receiver if its a smart contractRequires the transaction sender to be one of:     owner of a token - then its similar to `transfer()` but with       ERC721 support check on the receiver     approved – an address explicitly approved earlier by       the owner of a token to transfer this particular token ID     operator - an address explicitly approved earlier by       the owner to transfer all his tokens on behalfWhen transfer is complete, this function     checks if `_to` is a smart contract (code size > 0).     If so - it calls `onERC721Received()` and throws if the return value is not     `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.     The whole transaction is reverted in case of this error.This works identically to the other function with an extra data parameter,     except this function just sets data to \"\".",
        "params": {
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the token",
          "_tokenId": "ID of the token to be transferred     in the onERC721Received() call to `_to`;     ignored if the receiver is an external address"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address     by verifying if the receiver is an external address or     by calling onERC721Received() function on the receiver if its a smart contractRequires the transaction sender to be one of:     owner of a token - then its similar to `transfer()` but with       ERC721 support check on the receiver     approved – an address explicitly approved earlier by       the owner of a token to transfer this particular token ID     operator - an address explicitly approved earlier by       the owner to transfer all his tokens on behalfWhen transfer is complete, this function     checks if `_to` is a smart contract (code size > 0).     If so - it calls `onERC721Received()` and throws if the return value is not     `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.     The whole transaction is reverted in case of this error.",
        "params": {
          "_data": "Additional data with no specified format, sent     in the onERC721Received() call to `_to`;     ignored if the receiver is an external address",
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the token",
          "_tokenId": "ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval state of a given operatorAn operator is allowed to transfer ALL tokens of the sender on their behalf",
        "params": {
          "_approved": "representing the status of the approval to be set:     true – grants an approval     false - revokes an approval",
          "_operator": "operator address to set the approval for"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.     This function uses less than 30,000 gas.",
        "params": {
          "_interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "return": "`true` if the contract implements `interfaceID` and     `interfaceID` is not 0xffffffff, `false` otherwise"
      },
      "tokenByIndex(uint256)": {
        "details": "Throws if `_index` >= `totalSupply()`.",
        "params": {
          "_index": "a counter less than `totalSupply()`"
        },
        "return": "The token ID for the `_index`th token, unsorted"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Throws if `_index` >= `balanceOf(_owner)`.",
        "params": {
          "_index": "a counter less than `balanceOf(_owner)`",
          "_owner": "an address of the owner to query token from"
        },
        "return": "the token ID for the `_index`th token assigned to `_owner`, unsorted"
      },
      "tokenURI(uint256)": {
        "details": "Throws if `_tokenId` is not a valid token ID.     URIs are defined in RFC 3986.",
        "params": {
          "_tokenId": "uint256 ID of the token to query"
        },
        "return": "token URI"
      },
      "totalSupply()": {
        "return": "A count of valid tokens tracked by this contract,   where each one of them has an assigned and   queryable owner not equal to the zero address"
      },
      "transfer(address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another addressThis function is maintained to be used by developers to reduce gas costsRequires the transaction sender to be an owner of the token specified",
        "params": {
          "_to": "new owner address",
          "_tokenId": "ID of the token to transfer ownership rights for"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another addressThis function is maintained to be used by developers to reduce gas costsRequires the transaction sender to be one of:     owner of a token - then its just a usual `transfer()` (aka unsafe transfer)     approved – an address explicitly approved earlier by       the owner of a token to transfer this particular token ID     operator - an address explicitly approved earlier by       the owner to transfer all his tokens on behalf",
        "params": {
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the token",
          "_tokenId": "ID of the token to be transferred"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Updates set of the globally enabled features (`features`),     taking into account sender's permissionsRequires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateMaxTaxChangeFreq(uint32)": {
        "details": "Allows setting the `maxTaxChangeFreq` parameter of the contract,     which specifies how frequently the tax rate can be changedRequires sender to have `ROLE_TAX_MANAGER` permission.",
        "params": {
          "_maxTaxChangeFreq": "a value to set `maxTaxChangeFreq` to"
        }
      },
      "updateMsig(address,uint256,uint256,uint8[],bytes32[],bytes32[])": {
        "details": "MultiSig version of the `updateRole` functionUpdates set of permissions (role) for a given user,     taking into account signers' permissionsSetting role to zero is equivalent to removing all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to     copying signers' permissions (roles intersection) to the userRequires transaction signers to have `ROLE_ROLE_MANAGER` permissionRequires `MSIG_QUORUM` signatures in MultiSig mode –     if `FEATURE_MSIG_ENABLED` is enabled",
        "params": {
          "_expiresOn": "an expiration date of the request,     optional, required in MultiSig mode only",
          "_role": "bitmask representing a set of permissions to     enable/disable for a user specified",
          "_to": "address of a user to alter permissions for or zero     to alter global features of the smart contract",
          "r": "an array of ECDSA signature outputs, \"r\",     optional, required in MultiSig mode only",
          "s": "an array of ECDSA signature outputs, \"s\",     optional, required in MultiSig mode only",
          "v": "an array of ECDSA signature outputs, \"v\",     optional, required in MultiSig mode only"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Updates set of permissions (role) for a given user,     taking into account sender's permissions.Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to     copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "_role": "bitmask representing a set of permissions to     enable/disable for a user specified",
          "_to": "address of a user to alter permissions for or zero     to alter global features of the smart contract"
        }
      },
      "updateTaxRate(uint256,uint8,uint8)": {
        "details": "Requires tax update feature to be enabled on the contractRequires message sender to be owner of the tokenRequires previous tax change to be more then `maxTaxChangeFreq` blocks ago",
        "params": {
          "_tokenId": "country id to update tax for",
          "denominator": "tax rate denominator, 4 bits unsigned integer (0, 32)",
          "nominator": "tax rate nominator, 4 bits unsigned integer [0, 32)"
        }
      },
      "write(uint256,uint256,uint8,uint8)": {
        "details": "Writes token data",
        "params": {
          "_tokenId": "token ID to write data into",
          "length": "how many bits to write",
          "offset": "position in memory to write to (bits)",
          "value": "a value to write;     to write value as is, set offset and length to zero"
        }
      },
      "writePage(uint256,uint256,uint256,uint8,uint8)": {
        "details": "Writes token data, allows to access up to 2^256 pages of 256-bit memory slots",
        "params": {
          "_tokenId": "token ID to write data into",
          "length": "how many bits to write",
          "offset": "position in memory to write to (bits)",
          "page": "index of the page to write to",
          "value": "a value to write;     to write value as is, set offset and length to zero"
        }
      }
    },
    "title": "Country ERC721 Token"
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approves an address to transfer the given token on behalf of its ownerCan also be used to revoke an approval by setting approved address to zero"
      },
      "balanceOf(address)": {
        "notice": "Gets an amount of token owned by the given address"
      },
      "calculateTaxValueFor(uint256,uint256)": {
        "notice": "Calculates tax value for the given token and value"
      },
      "exists(uint256)": {
        "notice": "Checks if specified token exists"
      },
      "getApproved(uint256)": {
        "notice": "Gets the approved address for a single token"
      },
      "getCollection(address)": {
        "notice": "Retrieves a collection of tokens owned by a particular addressAn order of token IDs is not guaranteed and may change     when a token from the list is transferred"
      },
      "getNumberOfCountries()": {
        "notice": "Number of countries this contract can have"
      },
      "getNumberOfPlots(uint256)": {
        "notice": "Returns number of plots for the given country, defined by `_tokenId`"
      },
      "getTax(uint256)": {
        "notice": "Returns tax as a proper fraction for the given country, defined by `_tokenId`"
      },
      "getTaxPacked(uint256)": {
        "notice": "Returns tax as a proper fraction for the given country, defined by `_tokenId`"
      },
      "getTaxPercent(uint256)": {
        "notice": "Returns tax percent for the given country, defined by `_tokenId`"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Query if an address is an authorized operator for another address"
      },
      "ownerOf(uint256)": {
        "notice": "Finds an owner address for a token specified"
      },
      "revokeApproval(uint256)": {
        "notice": "Removes an approved address, which was previously added by `approve()`     for the given token. Equivalent to calling `approve(0, _tokenId)`."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "A.k.a \"safe transfer on behalf\"Transfers ownership rights of a token defined     by the token ID to a new owner specified by its addressAllows transferring ownership rights by a trading operator     on behalf of token owner. Allows building an exchange of tokens.Validates if destination address supports ERC721"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "A.k.a \"safe transfer on behalf\"Transfers ownership rights of a token defined     by the token ID to a new owner specified by its addressAllows transferring ownership rights by a trading operator     on behalf of token owner. Allows building an exchange of tokens.Validates if destination address supports ERC721"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "tokenByIndex(uint256)": {
        "notice": "Enumerate valid tokens"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Enumerate tokens assigned to an owner"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "totalSupply()": {
        "notice": "Total number of existing tokens (tracked by this contract)"
      },
      "transfer(address,uint256)": {
        "notice": "A.k.a \"unsafe transfer\"Transfers ownership rights of the token defined     by the token ID to a new owner specified by its addressDoesn't validate if destination address supports ERC721 tokens!     The token may be LOST if destination address doesn't support ERC721 tokens."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "A.k.a \"unsafe transfer on behalf\"Transfers ownership rights of a token defined     by the token ID to a new owner specified by its addressAllows transferring ownership rights by a trading operator     on behalf of token owner. Allows building an exchange of tokens.Doesn't validate if destination address supports ERC721 tokens!     The token may be LOST if destination address doesn't support ERC721 tokens."
      },
      "updateTaxRate(uint256,uint8,uint8)": {
        "notice": "Allows token owner to update tax rate of the country this token represents"
      }
    },
    "notice": "Country is unique tradable entity. Non-fungible."
  }
}