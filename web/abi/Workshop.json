{
  "contractName": "Workshop",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "user",
          "type": "address"
        },
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isUserInRole",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LEVEL_PRICES",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FEATURE_MSIG_ENABLED",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "gemInstance",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "GRADE_VALUES",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "WORKSHOP_UID",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "uint256"
        },
        {
          "name": "_expiresOn",
          "type": "uint256"
        }
      ],
      "name": "constructUpdateMsigRequest",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRoles",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAXIMUM_LEVEL_VALUE",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MSIG_QUORUM",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "GRADE_PRICES",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_by",
          "type": "address[]"
        },
        {
          "name": "actual",
          "type": "uint256"
        },
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "evaluateBy",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "GOLD_UID_REQUIRED",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "GEM_UID_REQUIRED",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "goldInstance",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAXIMUM_GRADE_TYPE",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "uint256"
        },
        {
          "name": "_expiresOn",
          "type": "uint256"
        },
        {
          "name": "v",
          "type": "uint8[]"
        },
        {
          "name": "r",
          "type": "bytes32[]"
        },
        {
          "name": "s",
          "type": "bytes32[]"
        }
      ],
      "name": "updateMsig",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "silverInstance",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SILVER_UID_REQUIRED",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FEATURE_UPGRADES_ENABLED",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "gemAddress",
          "type": "address"
        },
        {
          "name": "silverAddress",
          "type": "address"
        },
        {
          "name": "goldAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint24"
        },
        {
          "indexed": false,
          "name": "level",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "grade",
          "type": "uint32"
        }
      ],
      "name": "UpgradeComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_actual",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint24"
        },
        {
          "name": "levelDelta",
          "type": "uint8"
        },
        {
          "name": "gradeTypeDelta",
          "type": "uint8"
        }
      ],
      "name": "getUpgradePrice",
      "outputs": [
        {
          "name": "silverRequired",
          "type": "uint8"
        },
        {
          "name": "goldRequired",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint24"
        },
        {
          "name": "levelDelta",
          "type": "uint8"
        },
        {
          "name": "gradeTypeDelta",
          "type": "uint8"
        },
        {
          "name": "silver",
          "type": "uint8"
        },
        {
          "name": "gold",
          "type": "uint8"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenIds",
          "type": "uint24[]"
        },
        {
          "name": "levelDeltas",
          "type": "uint8[]"
        },
        {
          "name": "gradeDeltas",
          "type": "uint8[]"
        }
      ],
      "name": "getBulkUpgradePrice",
      "outputs": [
        {
          "name": "silverRequired",
          "type": "uint32"
        },
        {
          "name": "goldRequired",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenIds",
          "type": "uint24[]"
        },
        {
          "name": "levelDeltas",
          "type": "uint8[]"
        },
        {
          "name": "gradeDeltas",
          "type": "uint8[]"
        },
        {
          "name": "silver",
          "type": "uint32"
        },
        {
          "name": "gold",
          "type": "uint32"
        }
      ],
      "name": "bulkUpgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "rnd128",
          "type": "uint128"
        },
        {
          "name": "gradeValue",
          "type": "uint24"
        }
      ],
      "name": "randomGradeValue",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "n",
          "type": "uint32"
        },
        {
          "name": "iterations",
          "type": "uint32"
        }
      ],
      "name": "randomGradeValues",
      "outputs": [
        {
          "name": "",
          "type": "uint24[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-06-13T00:32:41.638Z",
  "devdoc": {
    "author": "Basil Gorin",
    "details": "Workshop acts as role provider (ROLE_LEVEL_PROVIDER) and     grade provider (ROLE_GRADE_PROVIDER) for the gem ERC721 token (GemERC721),     providing an ability to level up and upgrade their gemsWorkshop acts as a token destroyer (ROLE_TOKEN_DESTROYER)     for the gold and silver ERC20 tokens (GoldERC20 and SilverERC20),     consuming (burning) these tokens when leveling and upgrading gem(s)",
    "methods": {
      "bulkUpgrade(uint24[],uint8[],uint8[],uint32,uint32)": {
        "details": "Increases all gem's level and/or grade type in the     array specified by the values specified in corresponding input arraysConsumes gold and/or silver on success, amounts required can be     calculated using `getBulkUpgradePrice()` functionThrows if at least one of the amounts of silver/gold required to perform     an upgrade exceeds maximum allowed values `silver` and `gold` authorized     to be spent by the transaction sender (player)Throws on empty inputsThrows if input arrays differ in sizeThrows if `tokenIds` contains invalid token IDsThrows if `levelDeltas` contains invalid values, i.e. values     which violate token level constraints (maximum level)Throws if `gradeDeltas` contains invalid values, i.e. values     which violate token grade constraints (maximum grade)Throws if for any token ID in the `tokenIds` array, corresponding     values in `levelDeltas` and `gradeDeltas` (level delta and     grade delta combination) result in no level/grade change for the gemRequires transaction sender to be an owner of all the gemsThrows if token owner (transaction sender) has not enough     gold and/or silver on the balance",
        "params": {
          "gold": "maximum amount of gold sender authorizes smart contract to consume",
          "gradeDeltas": "an array of non-zero grade deltas, each element     corresponds to an element in tokenIds with the same index",
          "levelDeltas": "an array of non-zero level deltas, each element     corresponds to an element in tokenIds with the same index",
          "silver": "maximum amount of silver sender authorizes smart contract to consume",
          "tokenIds": "an array of valid token IDs to upgrade"
        }
      },
      "constructUpdateMsigRequest(address,uint256,uint256)": {
        "details": "Used to create an update role request to be signed by the userOnce signed by at least 2 users, the request can be executed     using `updateRoleMsig` function",
        "params": {
          "_expiresOn": "an expiration date of the request",
          "_role": "bitmask representing a set of permissions to     enable/disable for a user specified",
          "_to": "address of a user to alter permissions for or zero     to alter global features of the smart contract"
        }
      },
      "constructor": {
        "details": "Creates a workshop instance, binding it to gem (ERC721 token),     silver (ERC20 token) and gold (ERC20 token) instances specified",
        "params": {
          "gemAddress": "address of the deployed GemERC721 instance with     the `TOKEN_VERSION` equal to `GEM_TOKEN_VERSION_REQUIRED`",
          "goldAddress": "address of the deployed GoldERC20 instance with     the `TOKEN_VERSION` equal to `GOLD_TOKEN_VERSION_REQUIRED`",
          "silverAddress": "address of the deployed SilverERC20 instance with     the `TOKEN_VERSION` equal to `SILVER_TOKEN_VERSION_REQUIRED`"
        }
      },
      "evaluateBy(address[],uint256,uint256)": {
        "details": "Based on the actual role provided (set of permissions), operator addresses,     and role required (set of permissions), calculate the resulting     set of permissions (role).If all operators are super admins and have full permissions (FULL_PRIVILEGES_MASK),     the function will always return `required` regardless of the `actual`.In contrast, if operators have no permissions at all (zero mask),     the function will always return `actual` regardless of the `required`.",
        "params": {
          "_by": "non-empty array of addresses of the contract operators     to use permissions of for evaluation",
          "actual": "input set of permissions to evaluate against",
          "required": "desired set of permissions to have"
        },
        "return": "resulting set of permissions which can be set"
      },
      "features()": {
        "details": "Auxiliary getter function to maintain compatibility with previous     versions of the Access Control List smart contract, where     features was a separate uint256 public field"
      },
      "getBulkUpgradePrice(uint24[],uint8[],uint8[])": {
        "details": "This function contains same logic as in `bulkUpgrade()` and can     be used before calling it externally to check     sender has enough silver and gold to perform the transactionThrows on empty inputsThrows if input arrays differ in sizeThrows if `tokenIds` contains invalid token IDsThrows if `levelDeltas` contains invalid values, i.e. values     which violate token level constraints (maximum level)Throws if `gradeDeltas` contains invalid values, i.e. values     which violate token grade constraints (maximum grade)Throws if for any token ID in the `tokenIds` array, corresponding     values in `levelDeltas` and `gradeDeltas` (level delta and     grade delta combination) result in no level/grade change for the gemIf both `levelDeltas[i]` and `gradeDeltas[i]` are zeros for some `i`,     assumes this is a grade value only upgrade (for grade AAA gems) for that `i`Doesn't check token ID ownership, assuming it is checked     when performing an upgrade transaction itself",
        "params": {
          "gradeDeltas": "an array of non-zero grade deltas, each element     corresponds to an element in tokenIds with the same index",
          "levelDeltas": "an array of non-zero level deltas, each element     corresponds to an element in tokenIds with the same index",
          "tokenIds": "an array of valid token IDs to upgrade"
        },
        "return": "a tuple of two elements, first represents an amount of     silver required, second – amount of gold required"
      },
      "getUpgradePrice(uint24,uint8,uint8)": {
        "details": "This function contains same logic as in `upgrade()` and can     be used before calling it externally to check     sender has enough silver and gold to perform the transactionThrows if `tokenId` is invalid (non-existent token)Throws if `levelDelta` is invalid, i.e. violates     token level constraints (maximum level)Throws if `gradeTypeDelta` is invalid, i.e. violates     token grade constraints (maximum grade)Throws if `levelDelta` and `gradeTypeDelta` (level delta and     grade delta combination) result in no level/grade change for the gem     (ex.: both `levelDelta` and `gradeTypeDelta` are zero and gem grade is not AAA)Doesn't check token ID ownership, assuming it is checked     when performing an upgrade transaction itselfIf both `levelDelta` and `gradeTypeDelta` are zeros, assumes     this is a grade value only upgrade (for grade AAA gems)",
        "params": {
          "gradeTypeDelta": "number of grades to increase token grade by",
          "levelDelta": "number of levels to increase token level by",
          "tokenId": "a valid token ID to upgrade grade type for"
        },
        "return": "tuple containing amounts of silver and gold     required to upgrade the gem"
      },
      "isFeatureEnabled(uint256)": {
        "details": "Checks if requested set of features is enabled globally on the contract",
        "params": {
          "required": "set of features to check against"
        },
        "return": "true if all the features requested are enabled, false otherwise"
      },
      "isSenderInRole(uint256)": {
        "details": "Checks if transaction sender `msg.sender` has all the permissions (role) required",
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "return": "true if all the permissions requested are enabled, false otherwise"
      },
      "isUserInRole(address,uint256)": {
        "details": "Checks if user `user` has all the permissions (role) required",
        "params": {
          "required": "set of permissions (role) to check against",
          "user": "address of the user to check role for"
        },
        "return": "true if all the permissions requested are enabled, false otherwise"
      },
      "randomGradeValue(uint128,uint24)": {
        "details": "Generates new grade value based on the current one using     quadratic random distribution",
        "params": {
          "gradeValue": "current grade value, lower than `GRADE_VALUES`",
          "rnd128": "128 bits of randomness to be used to generate random grade value"
        },
        "return": "new grade value, lower than `GRADE_VALUES`, bigger or equal to current one"
      },
      "randomGradeValues(uint32,uint32)": {
        "details": "A function to check `randomGradeValue` generation,     see randomGradeValue function",
        "params": {
          "n": "how many grade values to generate"
        },
        "return": "an array of grade values of length n"
      },
      "updateFeatures(uint256)": {
        "details": "Updates set of the globally enabled features (`features`),     taking into account sender's permissionsRequires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateMsig(address,uint256,uint256,uint8[],bytes32[],bytes32[])": {
        "details": "MultiSig version of the `updateRole` functionUpdates set of permissions (role) for a given user,     taking into account signers' permissionsSetting role to zero is equivalent to removing all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to     copying signers' permissions (roles intersection) to the userRequires transaction signers to have `ROLE_ROLE_MANAGER` permissionRequires `MSIG_QUORUM` signatures in MultiSig mode –     if `FEATURE_MSIG_ENABLED` is enabled",
        "params": {
          "_expiresOn": "an expiration date of the request,     optional, required in MultiSig mode only",
          "_role": "bitmask representing a set of permissions to     enable/disable for a user specified",
          "_to": "address of a user to alter permissions for or zero     to alter global features of the smart contract",
          "r": "an array of ECDSA signature outputs, \"r\",     optional, required in MultiSig mode only",
          "s": "an array of ECDSA signature outputs, \"s\",     optional, required in MultiSig mode only",
          "v": "an array of ECDSA signature outputs, \"v\",     optional, required in MultiSig mode only"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Updates set of permissions (role) for a given user,     taking into account sender's permissions.Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to     copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "_role": "bitmask representing a set of permissions to     enable/disable for a user specified",
          "_to": "address of a user to alter permissions for or zero     to alter global features of the smart contract"
        }
      },
      "upgrade(uint24,uint8,uint8,uint8,uint8)": {
        "details": "Consumes gold and/or silver on success, amounts can be     calculated using `getLevelUpPrice()` and `getUpgradePrice()` functionsThrows if at least one of the amounts of silver/gold required to perform     an upgrade exceeds maximum allowed values `silver` and `gold` authorized     to be spent by the transaction sender (player)Increases gem's level and/or grade type by the values specifiedThrows if `tokenId` is invalid (non-existent token)Throws if `levelDelta` is invalid, i.e. violates     token level constraints (maximum level)Throws if `gradeTypeDelta` is invalid, i.e. violates     token grade constraints (maximum grade)Throws if `levelDelta` and `gradeTypeDelta` (level delta and     grade delta combination) result in no level/grade change for the gem     (ex.: both `levelDelta` and `gradeTypeDelta` are zero and gem grade is not AAA)If both `levelDelta` and `gradeTypeDelta` are zeros, assumes     this is a grade value only upgrade (for grade AAA gems)Requires transaction sender to be an owner of the gemThrows if token owner (transaction sender) has not enough     gold and/or silver on the balance",
        "params": {
          "gold": "maximum amount of gold sender authorizes smart contract to consume",
          "gradeTypeDelta": "number of grades to increase token grade by",
          "levelDelta": "number of levels to increase token level by",
          "silver": "maximum amount of silver sender authorizes smart contract to consume",
          "tokenId": "ID of the gem to level up / upgrade"
        }
      }
    },
    "title": "Workshop (Gem Upgrade Smart Contract)"
  },
  "userdoc": {
    "methods": {
      "bulkUpgrade(uint24[],uint8[],uint8[],uint32,uint32)": {
        "notice": "Levels up and/or upgrades several gems in single transaction (bulk mode)"
      },
      "getBulkUpgradePrice(uint24[],uint8[],uint8[])": {
        "notice": "Calculates an amount of silver and gold required to perform an upgrade"
      },
      "getUpgradePrice(uint24,uint8,uint8)": {
        "notice": "Calculates amount of silver and gold required to perform     level up and grade upgrade of a particular gem by     level and grade type deltas specified"
      },
      "upgrade(uint24,uint8,uint8,uint8,uint8)": {
        "notice": "Levels up and/or upgrades a particular gem"
      }
    },
    "notice": "Workshop smart contract is responsible for gem leveling/upgrading logic;     usually the gem may be upgrading by spending some gold and silver"
  }
}