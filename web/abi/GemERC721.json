{
  "contractName": "GemERC721",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_GRADE_PROVIDER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_approved",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_EXT_WRITER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "InterfaceId_ERC165",
      "outputs": [
        {
          "name": "",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedOperators",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "page",
          "type": "uint256"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "offset",
          "type": "uint8"
        },
        {
          "name": "length",
          "type": "uint8"
        }
      ],
      "name": "writePage",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collections",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_NEXT_ID_INC",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "name": "plotId",
          "type": "uint24"
        },
        {
          "name": "color",
          "type": "uint8"
        },
        {
          "name": "level",
          "type": "uint8"
        },
        {
          "name": "levelModified",
          "type": "uint32"
        },
        {
          "name": "grade",
          "type": "uint32"
        },
        {
          "name": "gradeModified",
          "type": "uint32"
        },
        {
          "name": "age",
          "type": "uint32"
        },
        {
          "name": "ageModified",
          "type": "uint32"
        },
        {
          "name": "state",
          "type": "uint24"
        },
        {
          "name": "stateModified",
          "type": "uint32"
        },
        {
          "name": "creationTime",
          "type": "uint32"
        },
        {
          "name": "index",
          "type": "uint32"
        },
        {
          "name": "ownershipModified",
          "type": "uint32"
        },
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "offset",
          "type": "uint8"
        },
        {
          "name": "length",
          "type": "uint8"
        }
      ],
      "name": "write",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_COLOR_PROVIDER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_AGE_PROVIDER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "nextId",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvals",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allTokens",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_TRANSFER_LOCK_PROVIDER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "page",
          "type": "uint256"
        },
        {
          "name": "offset",
          "type": "uint8"
        },
        {
          "name": "length",
          "type": "uint8"
        }
      ],
      "name": "readPage",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "transferLock",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRoles",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DEFAULT_MINING_BIT",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_STATE_PROVIDER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_LEVEL_PROVIDER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TOKEN_UID",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_TOKEN_CREATOR",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FEATURE_TRANSFERS_ON_BEHALF",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_operator",
          "type": "address"
        },
        {
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "revokeApproval",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "availableColors",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FEATURE_TRANSFERS",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "offset",
          "type": "uint8"
        },
        {
          "name": "length",
          "type": "uint8"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ROLE_TOKEN_DESTROYER",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "operator",
          "type": "address"
        },
        {
          "name": "actual",
          "type": "uint256"
        },
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "evaluateBy",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_from",
          "type": "uint24"
        },
        {
          "indexed": false,
          "name": "_to",
          "type": "uint24"
        }
      ],
      "name": "StateModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_from",
          "type": "uint24"
        },
        {
          "indexed": false,
          "name": "_to",
          "type": "uint24"
        }
      ],
      "name": "TransferLockChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_from",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "_to",
          "type": "uint8"
        }
      ],
      "name": "LevelUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_from",
          "type": "uint32"
        },
        {
          "indexed": false,
          "name": "_to",
          "type": "uint32"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_from",
          "type": "uint32"
        },
        {
          "indexed": false,
          "name": "_to",
          "type": "uint32"
        }
      ],
      "name": "EnergeticAgeModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_actual",
          "type": "uint256"
        }
      ],
      "name": "FeaturesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "_actual",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "incrementId",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "colors",
          "type": "uint8[]"
        }
      ],
      "name": "setAvailableColors",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAvailableColors",
      "outputs": [
        {
          "name": "",
          "type": "uint8[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPacked",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "name": "",
          "type": "uint24[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPackedCollection",
      "outputs": [
        {
          "name": "",
          "type": "uint80[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getCollection",
      "outputs": [
        {
          "name": "",
          "type": "uint24[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStateModified",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTransferable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_state",
          "type": "uint24"
        }
      ],
      "name": "setState",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCreationTime",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnershipModified",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_transferLock",
          "type": "uint24"
        }
      ],
      "name": "setTransferLock",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPlotId",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getProperties",
      "outputs": [
        {
          "name": "",
          "type": "uint48"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getColor",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLevelModified",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_level",
          "type": "uint8"
        }
      ],
      "name": "levelUp",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_by",
          "type": "uint8"
        }
      ],
      "name": "levelUpBy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getGradeModified",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getGrade",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getGradeType",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getGradeValue",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_grade",
          "type": "uint32"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAgeModified",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAge",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_age",
          "type": "uint32"
        }
      ],
      "name": "setAge",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getModified",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint24"
        },
        {
          "name": "_plotId",
          "type": "uint24"
        },
        {
          "name": "_color",
          "type": "uint8"
        },
        {
          "name": "_level",
          "type": "uint8"
        },
        {
          "name": "_grade",
          "type": "uint32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint24"
        },
        {
          "name": "_plotId",
          "type": "uint24"
        },
        {
          "name": "_color",
          "type": "uint8"
        },
        {
          "name": "_level",
          "type": "uint8"
        },
        {
          "name": "_grade",
          "type": "uint32"
        },
        {
          "name": "_age",
          "type": "uint32"
        }
      ],
      "name": "mintWith",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-05-31T07:43:45.403Z",
  "devdoc": {
    "author": "Basil Gorin",
    "details": "A gem is an ERC721 non-fungible token, which maps Token ID,     a 24 bit number to a set of gem properties -     attributes (mostly immutable by their nature) and state variables (mutable)A gem token supports only minting, it can be only created",
    "methods": {
      "approve(address,uint256)": {
        "details": "The zero approved address revokes an approval for a given tokenThere can only be one approved address per token at a given timeThis function can only be called by the token owner",
        "params": {
          "_approved": "address to be approved to transfer the token on behalf of its owner",
          "_tokenId": "ID of the token to be approved for transfer on behalf"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "_owner": "address to query the balance for"
        },
        "return": "an amount owned by the address passed as an input parameter"
      },
      "constructor": {
        "details": "Creates a ERC721 instance,     registers required ERC721 interfaces via ERC165"
      },
      "evaluateBy(address,uint256,uint256)": {
        "details": "Based on the actual role provided (set of permissions), operator address,     and role required (set of permissions), calculate the resulting     set of permissions (role).If operator is super admin and has full permissions (FULL_PRIVILEGES_MASK),     the function will always return `required` regardless of the `actual`.In contrast, if operator has no permissions at all (zero mask),     the function will always return `actual` regardless of the `required`.",
        "params": {
          "actual": "input set of permissions to modify",
          "operator": "address of the contract operator to use permissions of",
          "required": "desired set of permissions operator would like to have"
        },
        "return": "resulting set of permissions this operator can set"
      },
      "exists(uint256)": {
        "details": "Returns whether the specified token ID exists",
        "params": {
          "_tokenId": "ID of the token to query the existence for"
        },
        "return": "whether the token exists (true - exists)"
      },
      "getAge(uint256)": {
        "details": "Gets the energetic age of a gemThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the gem to get age for"
        },
        "return": "a token energetic age value"
      },
      "getAgeModified(uint256)": {
        "details": "Gets the energetic age modification date of a gemThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the gem to get age modification date for"
        },
        "return": "a token energetic age modification date"
      },
      "getAllTokens()": {
        "details": "Allows to fetch all existing (minted) token IDs",
        "return": "an ordered unsorted list of all existing token IDs"
      },
      "getApproved(uint256)": {
        "details": "Throws if `_tokenId` is not a valid token ID.",
        "params": {
          "_tokenId": "ID of the token to find the approved address for"
        },
        "return": "the approved address for this token,     or the zero address if there is no approved address"
      },
      "getAvailableColors()": {
        "details": "Getter for an entire `availableColors` array",
        "return": "array of available colors - `availableColors`"
      },
      "getCollection(address)": {
        "params": {
          "owner": "an address to query a collection for"
        },
        "return": "an ordered unsorted list of token IDs"
      },
      "getColor(uint256)": {
        "details": "Gets the color of a tokenThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to get color for"
        },
        "return": "a token color"
      },
      "getCreationTime(uint256)": {
        "details": "Gets the creation time of a tokenThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to get creation time for"
        },
        "return": "a token creation time as a unix timestamp"
      },
      "getGrade(uint256)": {
        "details": "Gets the grade of a gemThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the gem to get grade for"
        },
        "return": "a token grade"
      },
      "getGradeModified(uint256)": {
        "details": "Gets the grade modified date of a gemThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the gem to get grade modified date for"
        },
        "return": "a token grade modified date"
      },
      "getGradeType(uint256)": {
        "details": "Gets the grade type of a gemThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the gem to get grade type for"
        },
        "return": "a token grade type"
      },
      "getGradeValue(uint256)": {
        "details": "Gets the grade value of a gemThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the gem to get grade value for"
        },
        "return": "a token grade value"
      },
      "getLevel(uint256)": {
        "details": "Gets the level of a tokenThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to get level for"
        },
        "return": "a token level"
      },
      "getLevelModified(uint256)": {
        "details": "Gets the level modified date of a tokenThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to get level modification date for"
        },
        "return": "a token level modification date"
      },
      "getModified(uint256)": {
        "details": "Gets last modification data of any data in gem's structureDoesn't take into account ext256 dataThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to get modification time for"
        },
        "return": "a token modification time as a unix timestamp"
      },
      "getOwnershipModified(uint256)": {
        "details": "Gets the ownership modified time of a tokenThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to get ownership modified time for"
        },
        "return": "a token ownership modified time as a unix timestamp"
      },
      "getPacked(uint256)": {
        "details": "Gets a gem by ID, representing it as two integers.     The two integers are tightly packed with a gem data:     First integer (high bits) contains (from higher to lower bits order):         coordinates:           plotId,           depth (block ID),           gemNum (gem ID within a block)         color,         levelModified,         level,         gradeModified,         grade,         stateModified,         state,     Second integer (low bits) contains (from higher to lower bits order):         creationTime,         index,         ownershipModified,         ownerThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the gem to fetch"
        }
      },
      "getPackedCollection(address)": {
        "details": "Allows to fetch collection of tokens, including internal token data      in a single function, useful when connecting to external node like INFURAEach element in the collection contains     token ID (32 bits)     color (8 bits)     level (8 bits)     grade (32 bits)     state (8 low bits)",
        "params": {
          "owner": "an address to query a collection for"
        },
        "return": "an ordered unsorted list of packed token data"
      },
      "getPlotId(uint256)": {
        "details": "Gets the land plot ID of a gemThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the gem to get land plot ID value for"
        },
        "return": "a token land plot ID"
      },
      "getProperties(uint256)": {
        "details": "Gets the gem's properties – color, level and     grade - as packed uint32 numberThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the gem to get properties for"
        },
        "return": "gem's properties - color, level, grade as packed uint32"
      },
      "getState(uint256)": {
        "details": "Gets the state of a tokenThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to get state for"
        },
        "return": "a token state"
      },
      "getStateModified(uint256)": {
        "details": "Gets the state modified date of a tokenThrows if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to get state modified date for"
        },
        "return": "token state modification date as a unix timestamp"
      },
      "incrementId()": {
        "details": "Returns current value of `nextId` and increments it by one",
        "return": "next token ID"
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "the address that acts on behalf of the owner",
          "_owner": "the address which may have another address acting     on their behalf (operator address)"
        },
        "return": "true if `_operator` is allowed to transfer `_owner`s tokens, false otherwise"
      },
      "isFeatureEnabled(uint256)": {
        "details": "Checks if requested set of features is enabled globally on the contract",
        "params": {
          "required": "set of features to check"
        },
        "return": "true if all the features requested are enabled, false otherwise"
      },
      "isOperatorInRole(address,uint256)": {
        "details": "Checks if operator `operator` has all the permissions (role) required",
        "params": {
          "required": "set of permissions (role) to check"
        },
        "return": "true if all the permissions requested are enabled, false otherwise"
      },
      "isSenderInRole(uint256)": {
        "details": "Checks if transaction sender `msg.sender` has all the permissions (role) required",
        "params": {
          "required": "set of permissions (role) to check"
        },
        "return": "true if all the permissions requested are enabled, false otherwise"
      },
      "isTransferable(uint256)": {
        "details": "Verifies if token is transferable (can change ownership)Throws if token specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to check transferable state for"
        },
        "return": "true if token is transferable, false otherwise"
      },
      "levelUp(uint256,uint8)": {
        "details": "Levels up a gem to the level specifiedRequires sender to have `ROLE_STATE_PROVIDER` permissionThrows if token specified doesn't exist",
        "params": {
          "_level": "new gem's level to set to",
          "_tokenId": "ID of the gem to level up"
        }
      },
      "levelUpBy(uint256,uint8)": {
        "details": "Levels up a gem to by the level delta specifiedRequires sender to have `ROLE_STATE_PROVIDER` permissionThrows if token specified doesn't exist",
        "params": {
          "_by": "number of levels to level up by",
          "_tokenId": "ID of the gem to level up"
        }
      },
      "mint(address,uint24,uint24,uint8,uint8,uint32)": {
        "details": "Creates new token with token ID specified     and assigns an ownership `_to` for this tokenAllows setting initial token's propertiesRequires caller to be token creator (have `ROLE_TOKEN_CREATOR` permission)",
        "params": {
          "_color": "gem color",
          "_grade": "grade of the gem,     high 8 bits represent grade type,     low 24 bits - grade value",
          "_level": "gem level",
          "_plotId": "ID of the plot that gem \"belongs to\" (was found in)",
          "_to": "an address to mint token to (first owner of the token)",
          "_tokenId": "ID of the token to mint"
        }
      },
      "mintWith(address,uint24,uint24,uint8,uint8,uint32,uint32)": {
        "details": "Creates new token with token ID specified     and assigns an ownership `_to` for this tokenAllows setting initial tokens' propertiesRequires caller to be token creator (have `ROLE_TOKEN_CREATOR` permission)Requires caller to be bulk token creator (have `ROLE_BULK_CREATOR` permission)     if creating more than one token in a single transactionRequires caller to be age provider (have `ROLE_AGE_PROVIDER` permission) -     if setting initial energetic age for the token",
        "params": {
          "_age": "energetic age of the gem",
          "_color": "gem color",
          "_grade": "grade of the gem,     high 8 bits represent grade type,     low 24 bits - grade value",
          "_level": "gem level",
          "_plotId": "ID of the plot that gem \"belongs to\" (was found in)",
          "_to": "an address to mint token to (first owner of the token)",
          "_tokenId": "ID of the token to mint"
        }
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token from the `gems` mappingThrows if a token with the ID specified doesn't exist",
        "params": {
          "_tokenId": "ID of the token to query the owner for"
        },
        "return": "owner address currently marked as the owner of the given token"
      },
      "read(uint256,uint8,uint8)": {
        "details": "Reads token dataTo read whole 256 bits, set offset and length to zero",
        "params": {
          "_tokenId": "token ID to read data from",
          "length": "how many bits to read",
          "offset": "position in memory to read from (bits)"
        }
      },
      "readPage(uint256,uint256,uint8,uint8)": {
        "details": "Reads token data, allows to access up to 2^256 pages of 256-bit memory slotsTo read whole 256 bits, set offset and length to zero",
        "params": {
          "_tokenId": "token ID to read data from",
          "length": "how many bits to read",
          "offset": "position in memory to read from (bits)",
          "page": "index of the page to read from"
        }
      },
      "revokeApproval(uint256)": {
        "details": "Equal to calling `approve(0, _tokenId)`",
        "params": {
          "_tokenId": "ID of the token to remove approved address for"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address     by verifying if the receiver is an external address or     by calling onERC721Received() function on the receiver if its a smart contractRequires the transaction sender to be one of:     owner of a token - then its similar to `transfer()` but with       ERC721 support check on the receiver     approved – an address explicitly approved earlier by       the owner of a token to transfer this particular token ID     operator - an address explicitly approved earlier by       the owner to transfer all his tokens on behalfWhen transfer is complete, this function     checks if `_to` is a smart contract (code size > 0).     If so - it calls `onERC721Received()` and throws if the return value is not     `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.     The whole transaction is reverted in case of this error.This works identically to the other function with an extra data parameter,     except this function just sets data to \"\".",
        "params": {
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the token",
          "_tokenId": "ID of the token to be transferred     in the onERC721Received() call to `_to`;     ignored if the receiver is an external address"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address     by verifying if the receiver is an external address or     by calling onERC721Received() function on the receiver if its a smart contractRequires the transaction sender to be one of:     owner of a token - then its similar to `transfer()` but with       ERC721 support check on the receiver     approved – an address explicitly approved earlier by       the owner of a token to transfer this particular token ID     operator - an address explicitly approved earlier by       the owner to transfer all his tokens on behalfWhen transfer is complete, this function     checks if `_to` is a smart contract (code size > 0).     If so - it calls `onERC721Received()` and throws if the return value is not     `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.     The whole transaction is reverted in case of this error.",
        "params": {
          "_data": "Additional data with no specified format, sent     in the onERC721Received() call to `_to`;     ignored if the receiver is an external address",
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the token",
          "_tokenId": "ID of the token to be transferred"
        }
      },
      "setAge(uint256,uint32)": {
        "details": "Modifies the energetic age of a tokenRequires sender to have `ROLE_AGE_PROVIDER` permissionThrows if token specified doesn't exist",
        "params": {
          "_age": "new energetic age to set for the token",
          "_tokenId": "ID of the token to set age for"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval state of a given operatorAn operator is allowed to transfer ALL tokens of the sender on their behalf",
        "params": {
          "_approved": "representing the status of the approval to be set:     true – grants an approval     false - revokes an approval",
          "_operator": "operator address to set the approval for"
        }
      },
      "setAvailableColors(uint8[])": {
        "details": "Updates `availableColors` arrayRequires sender to have `ROLE_COLOR_PROVIDER` permissionRequires input array not to be empty",
        "params": {
          "colors": "array of available colors to set"
        }
      },
      "setState(uint256,uint24)": {
        "details": "Modifies the state of a tokenRequires sender to have `ROLE_STATE_PROVIDER` permissionThrows if token specified doesn't exist",
        "params": {
          "_state": "new state to set for the token",
          "_tokenId": "ID of the token to set state for"
        }
      },
      "setTransferLock(uint24)": {
        "details": "Allows setting the `transferLock` parameter of the contract,     which is used to determine if a particular token is locked or notA locked token cannot be transferredThe token is locked if it contains any bits     from the `transferLock` in its `state` setRequires sender to have `ROLE_TRANSFER_LOCK_PROVIDER` permission.",
        "params": {
          "_transferLock": "a value to set `transferLock` to"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.     This function uses less than 30,000 gas.",
        "params": {
          "_interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "return": "`true` if the contract implements `interfaceID` and     `interfaceID` is not 0xffffffff, `false` otherwise"
      },
      "tokenByIndex(uint256)": {
        "details": "Throws if `_index` >= `totalSupply()`.",
        "params": {
          "_index": "a counter less than `totalSupply()`"
        },
        "return": "The token ID for the `_index`th token, unsorted"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Throws if `_index` >= `balanceOf(_owner)`.",
        "params": {
          "_index": "a counter less than `balanceOf(_owner)`",
          "_owner": "an address of the owner to query token from"
        },
        "return": "the token ID for the `_index`th token assigned to `_owner`, unsorted"
      },
      "tokenURI(uint256)": {
        "details": "Throws if `_tokenId` is not a valid token ID.     URIs are defined in RFC 3986.",
        "params": {
          "_tokenId": "uint256 ID of the token to query"
        },
        "return": "token URI"
      },
      "totalSupply()": {
        "return": "A count of valid tokens tracked by this contract,   where each one of them has an assigned and   queryable owner not equal to the zero address"
      },
      "transfer(address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another addressThis function is maintained to be used by developers to reduce gas costsRequires the transaction sender to be an owner of the token specified",
        "params": {
          "_to": "new owner address",
          "_tokenId": "ID of the token to transfer ownership rights for"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another addressThis function is maintained to be used by developers to reduce gas costsRequires the transaction sender to be one of:     owner of a token - then its just a usual `transfer()` (aka unsafe transfer)     approved – an address explicitly approved earlier by       the owner of a token to transfer this particular token ID     operator - an address explicitly approved earlier by       the owner to transfer all his tokens on behalf",
        "params": {
          "_from": "current owner of the token",
          "_to": "address to receive the ownership of the token",
          "_tokenId": "ID of the token to be transferred"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Updates set of the globally enabled features (`features`),     taking into account sender's permissions.=Requires transaction sender to have `ROLE_FEATURE_MANAGER` permission.",
        "params": {
          "mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Updates set of permissions (role) for a given operator,     taking into account sender's permissions.Setting role to zero is equivalent to removing an operator.Setting role to `FULL_PRIVILEGES_MASK` is equivalent to     copying senders permissions (role) to an operator.Requires transaction sender to have `ROLE_ROLE_MANAGER` permission.",
        "params": {
          "operator": "address of an operator to alter permissions for",
          "role": "bitmask representing a set of permissions to     enable/disable for an operator specified"
        }
      },
      "upgrade(uint256,uint32)": {
        "details": "Upgrades the grade of the gemRequires new grade to be higher than an old oneRequires sender to have `ROLE_GRADE_PROVIDER` permissionThrows if token specified doesn't exist",
        "params": {
          "_grade": "new grade to set for the token, should be higher then current grade",
          "_tokenId": "ID of the gem to modify the grade for"
        }
      },
      "write(uint256,uint256,uint8,uint8)": {
        "details": "Writes token data",
        "params": {
          "_tokenId": "token ID to write data into",
          "length": "how many bits to write",
          "offset": "position in memory to write to (bits)",
          "value": "a value to write;     to write value as is, set offset and length to zero"
        }
      },
      "writePage(uint256,uint256,uint256,uint8,uint8)": {
        "details": "Writes token data, allows to access up to 2^256 pages of 256-bit memory slots",
        "params": {
          "_tokenId": "token ID to write data into",
          "length": "how many bits to write",
          "offset": "position in memory to write to (bits)",
          "page": "index of the page to write to",
          "value": "a value to write;     to write value as is, set offset and length to zero"
        }
      }
    },
    "title": "Gem ERC721 Token"
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approves an address to transfer the given token on behalf of its ownerCan also be used to revoke an approval by setting approved address to zero"
      },
      "balanceOf(address)": {
        "notice": "Gets an amount of token owned by the given address"
      },
      "exists(uint256)": {
        "notice": "Checks if specified token exists"
      },
      "getApproved(uint256)": {
        "notice": "Gets the approved address for a single token"
      },
      "getCollection(address)": {
        "notice": "Retrieves a collection of token IDs owned by a particular addressAn order of token IDs is not guaranteed and may change     when a token from the list is transferred"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Query if an address is an authorized operator for another address"
      },
      "ownerOf(uint256)": {
        "notice": "Finds an owner address for a token specified"
      },
      "revokeApproval(uint256)": {
        "notice": "Removes an approved address, which was previously added by `approve()`     for the given token. Equivalent to calling `approve(0, _tokenId)`."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "A.k.a \"safe transfer on behalf\"Transfers ownership rights of a token defined     by the token ID to a new owner specified by its addressAllows transferring ownership rights by a trading operator     on behalf of token owner. Allows building an exchange of tokens.Validates if destination address supports ERC721"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "A.k.a \"safe transfer on behalf\"Transfers ownership rights of a token defined     by the token ID to a new owner specified by its addressAllows transferring ownership rights by a trading operator     on behalf of token owner. Allows building an exchange of tokens.Validates if destination address supports ERC721"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "tokenByIndex(uint256)": {
        "notice": "Enumerate valid tokens"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Enumerate tokens assigned to an owner"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "totalSupply()": {
        "notice": "Total number of existing tokens (tracked by this contract)"
      },
      "transfer(address,uint256)": {
        "notice": "A.k.a \"unsafe transfer\"Transfers ownership rights of the token defined     by the token ID to a new owner specified by its addressDoesn't validate if destination address supports ERC721 tokens!     The token may be LOST if destination address doesn't support ERC721 tokens."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "A.k.a \"unsafe transfer on behalf\"Transfers ownership rights of a token defined     by the token ID to a new owner specified by its addressAllows transferring ownership rights by a trading operator     on behalf of token owner. Allows building an exchange of tokens.Doesn't validate if destination address supports ERC721 tokens!     The token may be LOST if destination address doesn't support ERC721 tokens."
      }
    },
    "notice": "Gem is unique tradable entity. Non-fungible."
  }
}