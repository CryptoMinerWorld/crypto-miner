pragma solidity 0.5.8;

/**
 * @title Random Library
 *
 * @notice Library for working with random numbers
 *
 * @author Basil Gorin
 */
library Random {
  /**
   * @notice Uniform random distribution implementation, generates random number
   *      in range [0, n)
   * @dev Based on the external source of randomness - `rnd256`
   * @param rnd256 source of randomness – up to 256 bits of random data,
   *      can be generated by `generate256` function
   * @param b number of bits to use in rnd256, zero means use all bits
   * @param n number of possible output values, upper bound is `n - 1`
   * @return random value in range [0, n)
   */
  function uniform(uint256 rnd256, uint8 b, uint256 n) internal pure returns (uint256) {
    // calculate the mask based on number of bits
    // if b is zero its same as 256, which is full mask
    uint256 mask = b == 0? uint256(-1): (uint256(1) << b) - 1; // uint256(-1) overflows to 0xFFFF...

    // arithmetic overflow check
    require(mask * n / n == mask, "arithmetic overflow: reduce b or/and n");

    // return random value in range [0, n)
    return (mask & rnd256) * n / (mask + 1);
  }

  /**
   * @dev Generates random value based on keccak256 hash of
   *      * seed
   *      * block.difficulty,
   *      * block.number,
   *      * gasleft(),
   *      * msg.data,
   *      * msg.sender,
   *      * msg.value,
   *      * tx.gasprice,
   *      * tx.origin
   * @dev The random value generated is not cryptographically secure
   *      and may be heavily influenced by miners, but its cheap though
   * @param seed a number to be added as a parameter to keccak256,
   *      can be zero (zero can be used as some default value)
   * @return random value – all possible values of uint256
   */
  function generate256(uint256 seed) internal view returns (uint256 rnd256) {
    // build the keccak256 hash of the transaction dependent values
    bytes32 hash = keccak256(abi.encodePacked(
      seed,
      block.difficulty,
      block.number,
      gasleft(),
      msg.data,
      msg.sender,
      msg.value,
      tx.gasprice,
      tx.origin
    ));
    // and return the result
    return uint256(hash);
  }
}
